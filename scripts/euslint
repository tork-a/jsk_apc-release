#!/usr/bin/env python
#FIXME: I have no idea about indent test for euslisp

from __future__ import print_function
import argparse
import sys

import yaml


def parse(source_code):
    is_block_comment = False
    result = {
        'parenthesis_open': 0,
        'parenthesis_close': 0,
        'tab': [],
        # 'indent': [],
        'white_space': [],
        'line_length': [],
    }
    # correct_indent = 0
    # next_correct_indent = 0
    for line_num, line in enumerate(source_code.splitlines()):
        if line.startswith('#|'):
            is_block_comment = True
        elif line.startswith('|#'):
            is_block_comment = False
        if is_block_comment:
            continue
        is_beginning = True
        is_line_comment = False
        is_inline_comment = False
        has_quote = False
        # indent = 0
        white_space = 0
        # correct_indent = next_correct_indent
        for char in line:
            if char == ';':
                if is_beginning:
                    is_line_comment = True
                else:
                    is_inline_comment = True
                break
            if char == ' ':
                if is_beginning is not True:
                    white_space += 1
                # else:
                #     indent += 1
            else:
                if is_beginning:
                    is_beginning = False
            if char == '(':
                result['parenthesis_open'] += 1
                # next_correct_indent += 2
            if char == ')':
                result['parenthesis_close'] += 1
                # next_correct_indent -= 2
            if char == '"':
                has_quote = True
            if char == '\t':
                result['tab'].append(line_num)
        # if indent != correct_indent:
        #     result['indent'].append([line_num, indent, correct_indent])
        is_comment = is_line_comment or is_inline_comment
        if len(line.split()) != 0 and is_comment is not True \
           and has_quote is not True and white_space != len(line.split())-1:
            result['white_space'].append(line_num)
        if is_line_comment is not True \
           and has_quote is not True and len(line) > 100:
            result['line_length'].append([line_num, len(line)])
    return result


def test_parenthesis(result):
    if result['parenthesis_open'] != result['parenthesis_close']:
        print("WARNING: Number of open/close parenthesises don't much: {0} != {1}"
              .format(result['parenthesis_open'], result['parenthesis_close']),
              file=sys.stderr)
        return 1
    return 0


def test_tab(result):
    if len(result['tab']) != 0:
        for tab_result in result['tab']:
            print('WARNING: There is tab at line {0}'.format(tab_result+1),
                  file=sys.stderr)
        return 1
    return 0


# def test_indent(result):
#     if len(result['indent']) != 0:
#         for indent_result in result['indent']:
#             print('WARNING: Incorrect Indent at line {0}: {1} != {2}'
#                   .format(indent_result[0]+1, indent_result[1], indent_result[2]),
#                           file=sys.stderr)
#         return 1
#     return 0


def test_white_space(result):
    if len(result['white_space']) != 0:
        for tab_result in result['white_space']:
            print('WARNING: Invalid white space usage at line {0}'.format(tab_result+1),
                  file=sys.stderr)
        return 1
    return 0


def test_line_length(result):
    if len(result['line_length']) != 0:
        for line_length_result in result['line_length']:
            print('WARNING: Line length exceeds 100 characters at line {0}: {1} > 100'
                  .format(line_length_result[0]+1, line_length_result[1]),
                          file=sys.stderr)
        return 1
    return 0


def lint(source_code):
    result = parse(source_code)

    result_display = yaml.safe_dump({'RESULT': result},
                                    default_flow_style=False)

    retcode = sum([
        test_parenthesis(result),
        test_tab(result),
        # test_indent(result),
        test_white_space(result),
        test_line_length(result),
    ])

    return retcode


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('filename')
    args = parser.parse_args()

    filename = args.filename
    source_code = open(filename).read()
    sys.exit(lint(source_code))


if __name__ == '__main__':
    main()

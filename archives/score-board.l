(defun make-score-board ()
  (let (b e x x2 x3-1 x3-2 x3-3 x4-1 x4-2 x4-3)
    (setq x (make-cube 400 650 500))
    (setq x2 (make-cube 400 150 400))
    (send x2 :locate #f(0 250 350))
    (setq x3-1 (make-cylinder 50 20))
    (setq x3-2 (make-cylinder 50 20))
    (setq x3-3 (make-cylinder 50 20))
    (setq x4-1 (make-cylinder 50 20))
    (setq x4-2 (make-cylinder 50 20))
    (setq x4-3 (make-cylinder 50 20))
    (send x3-1 :locate #f(0 100 250))
    (send x3-2 :locate #f(0 -40 250))
    (send x3-3 :locate #f(0 -200 250))
    (send x4-1 :locate (float-vector 0 100 550.0))
    (send x4-2 :locate (float-vector 0 -40 550.0))
    (send x4-3 :locate (float-vector 0 -200 550.0))

    (send x3-1 :set-color :blue)
    (send x3-2 :set-color :blue)
    (send x3-3 :set-color :blue)
    (send x4-1 :set-color :blue)
    (send x4-2 :set-color :blue)
    (send x4-3 :set-color :blue)
    (setq b (body+ x x2 x4-1 x4-2 x4-3  x3-1 x3-2 x3-3 ))
    (send b :set-color :red)
    b))

(defun score-board-init ()
  (when (not (boundp '*score-board*))
    (setq *score-board* (make-score-board))
    (send *score-board* :locate #f(0 2000 300))
    (send *score-board* :rotate -pi/2 :z :world)
    ))

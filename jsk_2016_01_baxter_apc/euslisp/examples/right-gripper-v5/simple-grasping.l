(require "package://jsk_2016_01_baxter_apc/euslisp/main-rgv5.l")


;; ---------------
;; CONSTANT VALUES
;; ---------------
(setq *arm* :rarm)


(defun go-initial ()
  (send *ri* :stop-grasp *arm*)
  (send *baxter* :angle-vector (send *ri* :state :potentio-vector))
  (send *baxter* :slide-gripper *arm* 0 :relative nil)
  (send *baxter* :rotate-gripper *arm* 0 :relative nil)
  (send *ri* :angle-vector (send *baxter* :angle-vector) 1500)
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pre-pose *arm* :opposed) 1500)
  (send *ri* :wait-interpolation)
  )

(defun wait-user
  (prompt)
  (let res
    (setq res (y-or-n-p prompt))
    (send *baxter* :angle-vector (send *ri* :state :potentio-vector))
    res))

(defun demo-init
  (&key (ctype :default-controller))
  (jsk_2016_01_baxter_apc::baxterrgv5-init :ctype ctype)
  (go-initial)
  (objects (list *baxter*))
  t)

(defun opposed-with-suction ()
  (go-initial)
  (unless (wait-user "Start grasp?") (return-from opposed-with-suction nil))
  (send *ri* :start-grasp *arm*)
  (unix::sleep 3)
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pose *arm* :opposed) 1500)
  (unless (wait-user "Release object?") (return-from opposed-with-suction nil))
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pre-pose *arm* :opposed) 1500)
  (send *ri* :stop-grasp *arm*)
  )

(defun opposed-without-suction ()
  (go-initial)
  (send *ri* :angle-vector (send *baxter* :rotate-gripper *arm* 90 :relative nil) 1500)
  (send *ri* :wait-interpolation)
  (unless (wait-user "Start grasp?") (return-from opposed-without-suction nil))
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pose *arm* :opposed) 1500)
  (unless (wait-user "Release object?") (return-from opposed-without-suction nil))
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pre-pose *arm* :opposed) 1500)
  )

(defun spherical-with-suction ()
  (go-initial)
  (send *baxter* :slide-gripper *arm* 0 :relative nil)
  (send *baxter* :rotate-gripper *arm* -45 :relative nil)
  (send *ri* :angle-vector (send *baxter* :angle-vector) 1500)
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pre-pose *arm* :spherical) 1500)
  (send *ri* :wait-interpolation)
  (send *ri* :start-grasp *arm*)
  (unless (wait-user "Start grasp?") (return-from spherical-with-suction nil))
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pose *arm* :spherical) 1500)
  (unless (wait-user "Release object?") (return-from spherical-with-suction nil))
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pre-pose *arm* :spherical) 1500)
  (send *ri* :stop-grasp *arm*)
  )

(defun spherical-without-suction ()
  (go-initial)
  (send *baxter* :slide-gripper *arm* 60 :relative nil)
  (send *baxter* :rotate-gripper *arm* -45 :relative nil)
  (send *ri* :angle-vector (send *baxter* :angle-vector) 1500)
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pre-pose *arm* :spherical) 1500)
  (send *ri* :wait-interpolation)
  (unless (wait-user "Start grasp?") (return-from spherical-without-suction nil))
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pose *arm* :spherical) 1500)
  (unless (wait-user "Release object?") (return-from spherical-without-suction nil))
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pre-pose *arm* :spherical) 1500)
  )

(defun cylindrical-with-suction
  (&key (object :thin))
  (go-initial)
  (cond
    ((eq object :thin)
     (send *baxter* :slide-gripper *arm* 80 :relative nil)
     (send *baxter* :rotate-gripper *arm* -90 :relative nil)
     (send *ri* :angle-vector (send *baxter* :angle-vector) 1500))
    ((eq object :cylinder)
     (send *baxter* :slide-gripper *arm* 0 :relative nil)
     (send *baxter* :rotate-gripper *arm* -45 :relative nil)
     (send *ri* :angle-vector (send *baxter* :angle-vector) 1500))
    (t (error "Don't know ~A~%" object)))
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pre-pose *arm* :cylindrical) 1500)
  (send *ri* :wait-interpolation)
  (unless (wait-user "Start sucking?") (return-from cylindrical-with-suction nil))
  (send *ri* :start-grasp *arm*)
  (unless (wait-user "Start grasp?") (return-from cylindrical-with-suction nil))
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pose *arm* :cylindrical) 1500)
  (unless (wait-user "Release object?") (return-from cylindrical-with-suction nil))
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pre-pose *arm* :cylindrical) 1500)
  (send *ri* :stop-grasp *arm*)
  )

(defun cylindrical-without-suction
  (&key (object :cylinder) (angle -45))
  (go-initial)
  (cond
    ((eq object :cylinder)
     (send *baxter* :slide-gripper *arm* 80 :relative nil)
     (send *baxter* :rotate-gripper *arm* 0 :relative nil)
     (send *ri* :angle-vector (send *baxter* :angle-vector) 1500)
     (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pre-pose *arm* :cylindrical) 1500)
     (send *ri* :wait-interpolation)
     (unless (wait-user "Start grasp?") (return-from cylindrical-without-suction nil))
     (send *baxter* :rotate-gripper *arm* angle :relative nil)
     (send *ri* :angle-vector (send *baxter* :angle-vector) 1500)
     (send *ri* :wait-interpolation)
     (send *baxter* :slide-gripper *arm* 0 :relative nil)
     (send *ri* :angle-vector (send *baxter* :angle-vector) 1500)
     (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pose *arm* :cylindrical) 1500)
     (send *ri* :wait-interpolation)
     (unless (wait-user "Release object?") (return-from cylindrical-without-suction nil))
     (send *baxter* :rotate-gripper *arm* 0 :relative nil)
     (send *baxter* :slide-gripper *arm* 80 :relative nil)
     (send *ri* :angle-vector (send *baxter* :angle-vector) 1500)
     (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pre-pose *arm* :cylindrical) 1500)
     (send *ri* :wait-interpolation)
     )
    (t (error "Don't know ~A~%" object)))
  )

(defun pick-flat-object-on-table
  (&key (object-h 0))
  (setq av-before-approach
        #f(-2.65869 84.7485 11.3379 -100.767 137.241 60.5566 25.9497 34.7827 0.0 23.3938
                    -72.1804 -37.2978 106.601 -126.204 -54.2365 -91.7015 121.418 -45.0)
        )
  (send *ri* :angle-vector (send *baxter* :angle-vector av-before-approach) 10000)
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pre-pose *arm* :cylindrical) 1500)
  (send *ri* :wait-interpolation)
  (send *ri* :angle-vector
        (send *baxter* *arm* :move-end-pos (float-vector 0 0 (+ -150 object-h)))
        3000)
  (send *ri* :start-grasp *arm*)
  (unix::sleep 3)
  (send *ri* :angle-vector (send *baxter* :angle-vector av-before-approach) 3000)
  (send *ri* :wait-interpolation)
  (setq ec (send *baxter* *arm* :end-coords :copy-worldcoords))
  (send ec :translate #f(0 0 150) :world)
  (send *baxter* :rotate-gripper *arm* -90 :relative nil)
  (send *baxter* :slide-gripper *arm* 50 :relative nil)
  (send *baxter* *arm* :inverse-kinematics ec)
  (send *ri* :angle-vector (send *baxter* :angle-vector) 5000)
  (send *ri* :wait-interpolation)
  (unix::sleep 1)
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pose *arm* :cylindrical) 1500)
  (unix::sleep 1)
  (send *ri* :spin-off-by-wrist *arm* :times 5)
  (send *ri* :wait-interpolation)
  (unless (wait-user "Release object?") (return-from pick-flat-object-on-table nil))
  (send *ri* :stop-grasp *arm*)
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pre-pose *arm* :cylindrical) 1500)
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pre-pose *arm* :opposed) 1500)
  )
(defun pick-tall-object-on-table
  (&key (z-offset 0))
  (setq av-before-approach
        #f(-2.52686 84.7485 11.2939 -100.745 137.373 60.5127 26.1914 34.7827 0.0
                    -89.7188 44.2261 54.6332 75.6437 -173.833 -43.4475 23.4764 3.75518 0.0)
        )
  (send *ri* :angle-vector (send *baxter* :angle-vector av-before-approach) 10000)
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pre-pose *arm* :opposed) 1500)
  (send *ri* :wait-interpolation)
  (send *ri* :angle-vector
        (send *baxter* *arm* :move-end-pos (float-vector 50 0 z-offset) :world)
        3000)
  (send *ri* :start-grasp *arm*)
  (send *ri* :wait-interpolation)
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pose *arm* :opposed) 1500)
  (unix::sleep 1)
  (send *ri* :angle-vector (send *baxter* *arm* :move-end-pos (float-vector 0 0 300) :world) 6000)
  (send *ri* :wait-interpolation)
  (unix::sleep 1)
  (send *ri* :spin-off-by-wrist *arm* :times 5)
  (send *ri* :wait-interpolation)
  (unless (wait-user "Release object?") (return-from pick-tall-object-on-table nil))
  (send *ri* :stop-grasp *arm*)
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pre-pose *arm* :opposed) 1500)
  )
(defun pick-thick-object-on-table
  (&key (z-offset 0))
  (setq av-before-approach
        #f(-2.52686 84.7705 11.2939 -100.745 137.417 60.5347 26.1914 34.7827 0.0
                    -94.856 41.5942 51.4819 77.8052 -174.661 -45.2637 -156.819 0.0 90.0)
        )
  (send *ri* :angle-vector (send *baxter* :angle-vector av-before-approach) 10000)
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pre-pose *arm* :opposed) 1500)
  (send *ri* :wait-interpolation)
  (send *ri* :angle-vector
        (send *baxter* *arm* :move-end-pos (float-vector 50 0 z-offset) :world)
        3000)
  (send *ri* :wait-interpolation)
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pose *arm* :opposed) 1500)
  (unix::sleep 1)
  (send *ri* :angle-vector (send *baxter* *arm* :move-end-pos (float-vector 0 0 300) :world) 6000)
  (send *ri* :wait-interpolation)
  (unix::sleep 1)
  (send *ri* :spin-off-by-wrist *arm* :times 5)
  (send *ri* :wait-interpolation)
  (unless (wait-user "Release object?") (return-from pick-thick-object-on-table nil))
  (send *ri* :stop-grasp *arm*)
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pre-pose *arm* :opposed) 1500)
  )
(defun pick-dumbbell-on-table
  (&key slide-l)
  (setq av-before-approach
        #f(0.153809 84.7925 11.3379 -100.745 137.483 60.5347 26.7847 34.7607 0.0
           -80.3979 -3.80127 97.4487 132.144 -82.9687 89.3848 8.04199 55.0 0.178926)
        )
  (setq av-after-approach
        #f(0.0 84.7705 11.3159 -100.745 137.417 60.5347 26.7407 34.7607 0.0
           -97.4707 -2.39502 94.5483 134.67 -91.4062 8.70117 0.0 20 -90)
        )
  (send *baxter* :angle-vector av-before-approach)
  (send *ri* :angle-vector (send *baxter* *arm* :move-end-pos (float-vector 0 0 100) :world) 10000)
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pre-pose *arm* :cylindrical) 1500)
  (send *ri* :wait-interpolation)
  (send *ri* :angle-vector (send *baxter* :angle-vector av-before-approach) 10000)
  (send *ri* :wait-interpolation)
  (send *ri* :angle-vector (send *baxter* :rotate-gripper *arm* -90 :relative nil) 2000)
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pose *arm* :cylindrical) 1500)
  (send *ri* :wait-interpolation)
  (if slide-l
    (send *ri* :angle-vector (send *baxter* :slide-gripper *arm* slide-l :relative nil) 3000))
  (unix::sleep 1)
  (send *ri* :angle-vector (send *baxter* *arm* :move-end-pos (float-vector 0 0 100) :world) 6000)
  (send *ri* :wait-interpolation)
  (send *baxter* :angle-vector av-after-approach)
  (if slide-l
    (send *baxter* :slide-gripper *arm* slide-l :relative nil))
  (send *ri* :angle-vector (send *baxter* :angle-vector) 6000)
  (send *ri* :wait-interpolation)
  (unix::sleep 1)
  (send *ri* :spin-off-by-wrist *arm* :times 5)
  (send *ri* :wait-interpolation)
  (unless (wait-user "Release object?") (return-from pick-dumbbell-on-table nil))
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pre-pose *arm* :cylindrical) 1500)
  )
(defun pick-flat-object-on-table-by-drawing ()
  (setq av-before-approach
        #f(1.604 84.8145 11.272 -100.789 137.417 60.5127 26.4771 34.8047 0.0
           -97.4991 21.8628 40.6055 81.2109 -159.873 -62.7759 -158.489 120.0 -90.0)
        )
  (send *ri* :angle-vector (send *baxter* :angle-vector av-before-approach) 10000)
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pre-pose *arm* :cylindrical) 1500)
  (send *ri* :wait-interpolation)
  (send *ri* :angle-vector
        (send *baxter* *arm* :move-end-pos (float-vector 0 0 -120) :world)
        3000)
  (send *ri* :start-grasp *arm*)
  (send *ri* :wait-interpolation)
  (send *ri* :angle-vector (send *baxter* :slide-gripper *arm* 0 :relative nil) 2000)
  (send *ri* :wait-interpolation)
  (send *ri* :angle-vector
        (send *baxter* *arm* :move-end-pos (float-vector -100 0 0) :world)
        3000)
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pose *arm* :cylindrical) 3000)
  (send *ri* :wait-interpolation)
  (unix::sleep 1)
  (send *ri* :angle-vector (send *baxter* *arm* :move-end-pos (float-vector 0 0 300) :world) 6000)
  (send *ri* :wait-interpolation)
  (unix::sleep 1)
  (send *ri* :spin-off-by-wrist *arm* :times 5)
  (send *ri* :wait-interpolation)
  (unless (wait-user "Release object?") (return-from pick-thick-object-on-table nil))
  (send *ri* :stop-grasp *arm*)
  (send *ri* :move-hand *arm* (send *baxter* :hand-grasp-pre-pose *arm* :cylindrical) 1500)
  )
